# 投資シミュレータ開発体験談

## 開発背景・動機
- 参考にしたWebPコンバーターツールのデザインが気に入った
- 投資について勉強しているが、銀行・貯蓄型保険・NISAの違いがわかりにくい
- 50年間の資産推移を比較できるツールがあったら便利だと思った
- AIを使えば非エンジニアでもアプリが作れると聞いて挑戦してみたかった

## 使用したAIツール・技術スタック
- **メインAI**: Claude Code (Anthropic)
- **技術スタック**: 
  - HTML5 (単一ファイル)
  - CSS3 (レスポンシブデザイン)
  - JavaScript (ES6+)
  - Chart.js (グラフライブラリ)
- **開発環境**: ブラウザのみ（完全クライアントサイド）

## 開発過程での苦労・エラー・解決方法

### 最初の段階
- 参考HTMLを渡して「同じようなツールが作りたい」と相談
- Claude Codeがプラン作成モードになって、実装前に計画を立ててくれた
- 最初は50年固定だったが、後から期間を自由に設定できるように変更

### デザイン・レイアウトの調整
- 最初は縦並びのフォームだったが「スクロールしたくない」と伝えたら横並びに
- 参考HTMLのデザインを維持しながら投資ツールに適用
- レスポンシブ対応で携帯でも使いやすく

### 機能追加・改善
- 初期は結果が即表示されたが「ボタンで実行したい」と要望
- 一度実行後はリアルタイム更新に変更
- 文字化け問題をUTF-8エンコーディングで解決

### パフォーマンス最適化
- 大きな数値（月100万×100年）で重くなる問題
- デバウンス処理（500ms遅延）
- 計算キャッシュ（Map使用、最新20件保持）
- 計算中表示とUIブロック防止

### SEO対策
- 参考HTMLのSEO実装を分析
- Open Graphタグ、Twitter Card対応
- JSON-LD構造化データ
- Google Analytics GA4統合
- アクセシビリティ属性追加

## 完成したアプリの機能

### 基本機能
- 毎月の積立額入力（1円〜100万円）
- 投資期間入力（1年〜100年）
- 3つの投資パターン比較：
  - 銀行預金（利率0%）
  - 貯蓄型保険（年1%複利）
  - NISA（年7%複利）

### グラフ機能
- Chart.jsを使った美しい折れ線グラフ
- 3パターンの資産推移を色分け表示
- ツールチップで詳細表示
- レスポンシブ対応

### UX改善
- 初期画面はシンプル（入力欄のみ）
- ボタン実行→リアルタイム更新の流れ
- 大きな数値での計算中表示
- デバウンス処理で快適な操作感

## 学んだこと・次への活かし方

### AIとの協働について
- Claude Codeはプラン作成→実装の流れが明確
- 具体的な要望を伝えると的確に対応してくれる
- エラーや改善点も段階的に解決してくれる

### 技術的な学び
- 単一HTMLファイルでも高機能なアプリが作れる
- Chart.jsは非エンジニアでも扱いやすい
- パフォーマンス最適化の重要性
- SEO対策の実装方法

### 開発プロセスの発見
- 参考デザインがあると開発がスムーズ
- ユーザビリティを意識した段階的改善
- レスポンシブデザインの重要性
- 完全クライアントサイドの利便性

### 次への活かし方
- 他の計算ツール開発にも応用可能
- プロンプト作成術の向上
- AIとの効果的なコミュニケーション方法
- 段階的な機能改善アプローチ

## 開発時間
- 初期バージョン完成：約2時間
- 機能追加・改善：約3時間  
- SEO対策・最適化：約1時間
- **合計：約6時間**

## 感想
非エンジニアでもAIの力を借りれば、想像以上に高機能なWebアプリが作れることに驚きました。特に段階的な改善プロセスが楽しく、「もっとこうしたい」という要望を伝えるとすぐに実現してくれるのが感動的でした。